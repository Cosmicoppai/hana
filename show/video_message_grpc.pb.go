// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.20.1
// source: video_message.proto

package show

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// VideoServiceClient is the client_req API for VideoService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type VideoServiceClient interface {
	GetVideo(ctx context.Context, in *VideoId, opts ...grpc.CallOption) (VideoService_GetVideoClient, error)
	GetVideoMetadata(ctx context.Context, in *VideoId, opts ...grpc.CallOption) (*VideoMetaData, error)
	GetVideosMetadata(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*VideosMetaData, error)
	AddVideo(ctx context.Context, opts ...grpc.CallOption) (VideoService_AddVideoClient, error)
}

type videoServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewVideoServiceClient(cc grpc.ClientConnInterface) VideoServiceClient {
	return &videoServiceClient{cc}
}

func (c *videoServiceClient) GetVideo(ctx context.Context, in *VideoId, opts ...grpc.CallOption) (VideoService_GetVideoClient, error) {
	stream, err := c.cc.NewStream(ctx, &VideoService_ServiceDesc.Streams[0], "/VideoService/get_video", opts...)
	if err != nil {
		return nil, err
	}
	x := &videoServiceGetVideoClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type VideoService_GetVideoClient interface {
	Recv() (*Video, error)
	grpc.ClientStream
}

type videoServiceGetVideoClient struct {
	grpc.ClientStream
}

func (x *videoServiceGetVideoClient) Recv() (*Video, error) {
	m := new(Video)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *videoServiceClient) GetVideoMetadata(ctx context.Context, in *VideoId, opts ...grpc.CallOption) (*VideoMetaData, error) {
	out := new(VideoMetaData)
	err := c.cc.Invoke(ctx, "/VideoService/get_video_metadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoServiceClient) GetVideosMetadata(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*VideosMetaData, error) {
	out := new(VideosMetaData)
	err := c.cc.Invoke(ctx, "/VideoService/get_videos_metadata", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *videoServiceClient) AddVideo(ctx context.Context, opts ...grpc.CallOption) (VideoService_AddVideoClient, error) {
	stream, err := c.cc.NewStream(ctx, &VideoService_ServiceDesc.Streams[1], "/VideoService/add_video", opts...)
	if err != nil {
		return nil, err
	}
	x := &videoServiceAddVideoClient{stream}
	return x, nil
}

type VideoService_AddVideoClient interface {
	Send(*UploadVideo) error
	CloseAndRecv() (*VideoId, error)
	grpc.ClientStream
}

type videoServiceAddVideoClient struct {
	grpc.ClientStream
}

func (x *videoServiceAddVideoClient) Send(m *UploadVideo) error {
	return x.ClientStream.SendMsg(m)
}

func (x *videoServiceAddVideoClient) CloseAndRecv() (*VideoId, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(VideoId)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// VideoServiceServer is the server API for VideoService service.
// All implementations must embed UnimplementedVideoServiceServer
// for forward compatibility
type VideoServiceServer interface {
	GetVideo(*VideoId, VideoService_GetVideoServer) error
	GetVideoMetadata(context.Context, *VideoId) (*VideoMetaData, error)
	GetVideosMetadata(context.Context, *emptypb.Empty) (*VideosMetaData, error)
	AddVideo(VideoService_AddVideoServer) error
	mustEmbedUnimplementedVideoServiceServer()
}

// UnimplementedVideoServiceServer must be embedded to have forward compatible implementations.
type UnimplementedVideoServiceServer struct {
}

func (UnimplementedVideoServiceServer) GetVideo(*VideoId, VideoService_GetVideoServer) error {
	return status.Errorf(codes.Unimplemented, "method GetVideo not implemented")
}
func (UnimplementedVideoServiceServer) GetVideoMetadata(context.Context, *VideoId) (*VideoMetaData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVideoMetadata not implemented")
}
func (UnimplementedVideoServiceServer) GetVideosMetadata(context.Context, *emptypb.Empty) (*VideosMetaData, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetVideosMetadata not implemented")
}
func (UnimplementedVideoServiceServer) AddVideo(VideoService_AddVideoServer) error {
	return status.Errorf(codes.Unimplemented, "method AddVideo not implemented")
}
func (UnimplementedVideoServiceServer) mustEmbedUnimplementedVideoServiceServer() {}

// UnsafeVideoServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to VideoServiceServer will
// result in compilation errors.
type UnsafeVideoServiceServer interface {
	mustEmbedUnimplementedVideoServiceServer()
}

func RegisterVideoServiceServer(s grpc.ServiceRegistrar, srv VideoServiceServer) {
	s.RegisterService(&VideoService_ServiceDesc, srv)
}

func _VideoService_GetVideo_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(VideoId)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(VideoServiceServer).GetVideo(m, &videoServiceGetVideoServer{stream})
}

type VideoService_GetVideoServer interface {
	Send(*Video) error
	grpc.ServerStream
}

type videoServiceGetVideoServer struct {
	grpc.ServerStream
}

func (x *videoServiceGetVideoServer) Send(m *Video) error {
	return x.ServerStream.SendMsg(m)
}

func _VideoService_GetVideoMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(VideoId)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServiceServer).GetVideoMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/VideoService/get_video_metadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServiceServer).GetVideoMetadata(ctx, req.(*VideoId))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoService_GetVideosMetadata_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(VideoServiceServer).GetVideosMetadata(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/VideoService/get_videos_metadata",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(VideoServiceServer).GetVideosMetadata(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _VideoService_AddVideo_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(VideoServiceServer).AddVideo(&videoServiceAddVideoServer{stream})
}

type VideoService_AddVideoServer interface {
	SendAndClose(*VideoId) error
	Recv() (*UploadVideo, error)
	grpc.ServerStream
}

type videoServiceAddVideoServer struct {
	grpc.ServerStream
}

func (x *videoServiceAddVideoServer) SendAndClose(m *VideoId) error {
	return x.ServerStream.SendMsg(m)
}

func (x *videoServiceAddVideoServer) Recv() (*UploadVideo, error) {
	m := new(UploadVideo)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// VideoService_ServiceDesc is the grpc.ServiceDesc for VideoService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var VideoService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "VideoService",
	HandlerType: (*VideoServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "get_video_metadata",
			Handler:    _VideoService_GetVideoMetadata_Handler,
		},
		{
			MethodName: "get_videos_metadata",
			Handler:    _VideoService_GetVideosMetadata_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "get_video",
			Handler:       _VideoService_GetVideo_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "add_video",
			Handler:       _VideoService_AddVideo_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "video_message.proto",
}
